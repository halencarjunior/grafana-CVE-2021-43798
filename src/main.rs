//use rayon::prelude::*;
//use reqwest::{blocking::Client, redirect};
use std::{env, time::Duration};
use clap::{Arg, App};
use colorful::{Color, Colorful};
use std::fs::File;
use std::io::{self, BufRead};
use std::path::Path;

mod error;
pub use error::Error;

mod plugins;
pub use plugins::GRAFANA_PLUGINS;

mod chkvuln;
pub use chkvuln::checkvuln;
pub use chkvuln::file_to_string;

fn main() -> Result<(), anyhow::Error> {
    
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        return Err(Error::CliUsage.into());
    }

    let matches = App::new("Grafana CVE Scan 21-43798")
                    .version("0.1")
                    .author("bt0 bt0@tutanota.com")
                    .about("Grafana CVE-2021-43798\n=============================\nIf you prefer to scan a list of hosts, \ndo not forget to include it in the format  host:port")
                    .arg(Arg::with_name("host")
                            .short("H")
                            .long("host")
                            .value_name("Host IP or domain")
                            .help("Host IP or Domain and port e.g. 127.0.0.1:3000 to be checked for CVE")
                            .takes_value(true))
                            //.required(true))
                    .arg(Arg::with_name("hostlist")
                            .short("hl")
                            .long("hostlist")
                            .help("File containing a list of Hosts 1 per line with ip/domain:port e.g. 127.0.0.1:3000")
                            .takes_value(true))
                    .arg(Arg::with_name("file")
                            .short("f")
                            .long("file")
                            .help("File to be read on grafana server")
                            .takes_value(true))
                    .arg(Arg::with_name("nossl")
                            .short("n")
                            .long("nossl")
                            .help("Use http:// instead https:// on URL")
                            .takes_value(false))
                    .arg(Arg::with_name("check")
                            .short("c")
                            .long("check")
                            .help("Just check for Vulnerability")
                            .takes_value(false))
                    .get_matches();

    if matches.is_present("host") {
        print_banner();
        let ip = matches.value_of("host").unwrap();
        let file = matches.value_of("file").unwrap();
        let https;
        let check;
        
        if matches.is_present("nossl") {
            https = true;
        } else {
            https = false;
        }
        
        if matches.is_present("check") {
            check = true;
                checkvuln(ip.to_string(), "".to_string(), file.to_string(), https, check);
        } else {
            check = false;
            for plugin in GRAFANA_PLUGINS {
                checkvuln(ip.to_string(), plugin.to_string(), file.to_string(), https, check);
            }
        }

        println!("{}", String::from(ip));
    } else if matches.is_present("hostlist") {
            print_banner();
            println!("Using file with ip list");
            let filename = matches.value_of("hostlist").unwrap();
            let file = matches.value_of("file").unwrap();
            let https;
            let check;

            if matches.is_present("nossl") {
                https = true;
            } else {
                https = false;
            }

            if matches.is_present("check") {
                check = true;
                
                if let Ok(lines) = read_lines(filename) {
                    for line in lines {
                        if let Ok(ip) = line {
                            checkvuln(ip.to_string(), "".to_string(), file.to_string(), https, check);
                        }
                    }
                }

            } else {
                check = false;
                for plugin in GRAFANA_PLUGINS {  
    
                    if let Ok(lines) = read_lines(filename) {
                        for line in lines {
                            if let Ok(ip) = line {
                                checkvuln(ip.to_string(), plugin.to_string(), file.to_string(), https, check);
                            }
                        }
                    }   
                    
                }
            }
        }
           

    Ok(())
}

fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where P: AsRef<Path>, {
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}

fn print_banner() {
    println!("{}", "Grafana CVE-2021-43798".color(Color::Yellow).bold());
    println!("{}", "v.0.1 by bt0".color(Color::Yellow).bold());
    println!("{}", "=====================================".color(Color::Yellow).bold());
    println!("{}", "Disclaimer: Do not use it on hosts that you don't own!".color(Color::Red).bold());
    println!("{}", "Just for Educational Purposes".color(Color::Red).bold());
}
